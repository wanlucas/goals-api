// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  branchs   Branch[]
}

model Branch {
  id        String    @id @default(uuid())
  name      String
  userId    String
  icon      String
  xp        Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  goals     Goal[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, name])
}

model Goal {
  id          String   @id @default(uuid())
  description String
  target      Int?
  score       Int?
  difficulty  Int
  branchId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Task {
  id          String       @id @default(uuid())
  description String
  goalId      String?
  duration    Int?
  value       Int?
  quantity    Int
  type        Int          @default(1)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  frequency   String
  increment   Int?
  time        String?
  runAt       Json?
  goal        Goal?        @relation(fields: [goalId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  records     TaskRecord[]
}

model TaskRecord {
  taskId   String
  date     String
  quantity Int?
  duration Int?
  value    Int?
  done     Boolean @default(false)
  task     Task    @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([taskId, date])
  @@index([date])
}
